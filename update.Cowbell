# -*-sh-*-
#!/bin/bash
#
# $Id$
#
#-----------------------------------------------------------
# LosF Software Updates
# 
# Cluster specific software package updates.
#
# Questions/Problems?: karl@tacc.utexas.edu
# Texas Advanced Computing Center 
#-----------------------------------------------------------

# Command-line Inputs

# Inputs -------------------

export VERBOSE=0
export UPDATE_RPMS=1

# End Inputs -------------------

export TOP_DIR=`echo $( (cd -P $(dirname $0) && pwd) )`

export MYHOST=`hostname -s`
export RPM_DIR=`$TOP_DIR/rpm_topdir | grep RPM_TOPDIR | awk '{print $3}'`
export MYARCH=x86_64

#-------------------------------------
# Command-Line Options 
# Used to setup rpm install location
# for use with PXE initiated install
#-------------------------------------

NUM_ARGS=$#

if [ $# -gt 1 -a "$1" = "PXE" ];then
    export SRC_DIR=$2
    export MODE="PXE"

    echo " "
    echo "** Running update.sh in PXE install mode"
    echo "** -> Installing from $SRC_DIR"
else
    export SRC_DIR=$RPM_DIR
    export MODE="INTERACTIVE"
fi

#-------------------
# Query type of node
#-------------------

export NODE_TYPE_SILENT=1

RESULT=`$TOP_DIR/node_types | grep Node_Type | awk '{print $3}'`
CLUSTER=`echo $RESULT | awk -F : '{print $1}'`
BASENAME=`echo $RESULT | awk -F : '{print $2}'`

if [ x"$BASENAME" == "x" -o x"$CLUSTER" == "x" ];then
    echo " "
    echo "**"
    echo "** Error: unable to ascertain Cluster node type for host ($MYHOST)"
    echo "**"
    echo " "
    exit 1
fi

#-----------------------------
# Software common to all Nodes
#-----------------------------

GLOBAL_RPMS=" \
   finger:0.17-39.el6 \
   tacc_lua:5.1.4.4-1 \
   lmod:3.3.1-1 \
"

#   ipmitool:1.8.11-6.el6 \
#   OpenIPMI:2.0.16-12.el6 \
#   OpenIPMI-libs:2.0.16-12.el6 \

GLOBAL_UNINSTALL_RPMS="\

"

#------------------------------------------------------------------------
# Note: Master is tasked with keeping the programs in /share in check.
# This means that any package installed into /opt/apps should be
# controlled via master and added to the following SHARED_RPMS
# list.  For testing, this same list will also be installed on
# a local (non-shared) disk on the build node.
#------------------------------------------------------------------------

SHARED_RPMS=" \
"

# Now we define rpms local to each appliance. Recall note above that
# master is in charge of all apps in /share and therefore inherits
# from SHARED_RPMS

# convenience s/w definitions

#ipoib_production="tacc_ib:1.0-9"
ipoib_production="tacc_ib:1.0-11"

lustre_production=" \
   lustre:1.8.5-2.6.18_194.17.1.el5_TACC_201101171051 \
    lustre-modules:1.8.5-2.6.18_194.17.1.el5_TACC_201101281705 \
    "

ofed_production=" \
    libibcm:1.0.5-1 \
    libibmad:1.3.6-1 \
    libibumad:1.3.6-1 \
    libibverbs:1.1.4-0.14.gb6c138b \
    libibverbs-utils:1.1.4-0.14.gb6c138b \
    libmlx4:1.0-0.13.g4e5c43f
    librdmacm:1.0.13-1 \
    librdmacm-utils:1.0.13-1 \
    libsdp:1.1.103-2 \
    mstflint:1.4-0.6.g63179f4
    ofed-scripts:1.5.2-OFED.1.5.2. \
    opensm-libs:3.3.7-1 \
    perftest:1.3.0-0.28.gca1c30b \
    qperf:0.4.6-0.1.gb81434e \
    sdpnetstat:1.60-0.2.g8844f04 \
    srptools:0.0.4-0.1.gce1f64c \
"

master_RPMS=" \
    $SHARED_RPMS \
    tacc_login_scripts-login:2.0-49 \
    "

oss_RPMS=" \
    "

mds_RPMS=" \
    "

compute_and_login_RPMS=" \
    "

compute_RPMS=" \
    "



# build is a special type of compute; it has all the same packages,
# but we treat as a different appliance to have alternate syncing
# capabilities.

build_RPMS=" \
  "

# please also stop putting things in gridftp list above which are not required
# it is not a login node

gridftp_RPMS=" \
  "

# please also stop putting things in gridftp list above which are not required
# it is not a login node

login_RPMS=" \
    "



bigmem_RPMS=" \
    "
# Note, due to differences with compute RPMS (specifically tacc_outage2), start with 
# compute and login RPMs and build from there 
gpgpu_RPMS=" \
    "

csrcompute_RPMS=" \
    "

sge_RPMS=" \
    "

admin_RPMS=" \
  "

# Special check for the build node.  Note that for testing, /share/apps
# on the build node maps to a local file system on build.  Otherwise, build
# is treated as a regular compute node.  

if [ "$MYHOST" == "build" ];then
    echo " "
    echo "** Important note for build"
    echo "** --> Installing apps in local /share/apps for testing"
    echo " "
    compute_RPMS="$compute_RPMS $SHARED_RPMS"
fi


#-------------------
# Kernel Definitions
#-------------------

default_kernel_date="2.6.18-194.17.1.el5_TACC #12 SMP Fri Jan 28 13:03:50 CST 2011"
default_kernel="tacc-kernel-2.6.18194.17.1.el5_TACC-6"

nfs_KERNEL_DATE="2.6.18-194.el5 #1 SMP Fri Apr 2 14:58:14 EDT 2010"
nfs_KERNEL="kernel-2.6.18-194.el5"

master_KERNEL_DATE="2.6.32-71.29.1.el6.x86_64 #1 SMP Mon Jun 27 19:49:27 BST 2011"
master_KERNEL="kernel-2.6.32-71.29.1.el6"

login_KERNEL_DATE="2.6.18-194.32.1.el5_TACC #2 SMP Fri Mar 18 11:27:58 CDT 2011"
login_KERNEL="tacc-kernel-2.6.18.194.32.1.el5_TACC-1"

bigmem_KERNEL="$default_kernel"
bigmem_KERNEL_DATE="$default_kernel_date"

bigmem_KERNEL="$login_KERNEL"
bigmem_KERNEL_DATE="$login_KERNEL_DATE"

gridftp_KERNEL_DATE="$login_KERNEL_DATE"
gridftp_KERNEL="$login_KERNEL"

compute_KERNEL_DATE="2.6.32-71.el6.x86_64 #1 SMP Fri May 20 03:51:51 BST 2011"
compute_KERNEL="kernel-2.6.32-71.el6"

admin_KERNEL_DATE="$compute_KERNEL_DATE"
admin_KERNEL="$compute_KERNEL"

gpgpu_KERNEL_DATE="$compute_KERNEL_DATE"
gpgpu_KERNEL="$compute_KERNEL"

csrcompute_KERNEL_DATE="$compute_KERNEL_DATE"
csrcompute_KERNEL="$compute_KERNEL"


#compute_IB_DATE="Fri 14 Jan 2011 07:43:46 AM CST"
compute_IB_DATE="Fri 18 Mar 2011 11:48:11 AM CDT"

build_KERNEL_DATE="$compute_KERNEL_DATE"
build_KERNEL="$compute_KERNEL"


# Special conditional for kernel-ib -> since OFED always wants 
# to keep the same release number, we will check the build date
# if given.
if [ $BASENAME == "compute" ];then
    echo "Special kernel-ib check..."
    ib_date=`rpm -qi kernel-ib | grep "Build Date"  | awk -F 'Build Date: ' '{print $2}'`
    if [ "$ib_date" != "$compute_IB_DATE" ];then
	echo "Removing out of date kernel-ib"
	rpm -e --nodeps --ignoresize kernel-ib
	rpm -e --nodeps --ignoresize kernel-ib-devel >& /dev/null
    fi
fi

oss_KERNEL_DATE="2.6.18-194.32.1.el5_TACC #1 SMP Fri Jun 3 15:26:28 CDT 2011"
oss_KERNEL="tacc-kernel-2.6.18.194.32.1.el5_TACC-5"

mds_KERNEL_DATE="$oss_KERNEL_DATE"
mds_KERNEL="$oss_KERNEL"

sge_KERNEL_DATE="current"
sge_KERNEL="tacc-kernel-2.6.18128.7.1_lustre_perfctr_TACC-1"

#-------------------------
# Function initializtion
#-------------------------

. $TOP_DIR/utils/verify_rpms.sh
. $TOP_DIR/utils/verify_kernel.sh

#--------------------------------------
# Verify existence of key mount points
# TODO: move this to utils functions
#--------------------------------------

MOUNT_PTS="/home1 /sge_common /share1 /exp1"

for mount in $MOUNT_PTS; do
    if [ ! -d $mount ];then
	echo "Creating mount point $mount..."
	mkdir $mount
    fi
done

#--------------------------------
# Verify the Kernel Installation
#--------------------------------

export NEEDS_UPDATE=0

rpms_list=$BASENAME"_KERNEL_DATE"
eval local_date=\$$rpms_list

rpms_list=$BASENAME"_KERNEL"
eval local_kernel=\$$rpms_list

GRUB_DIR=$TOP_DIR/grub_files/$CLUSTER/$BASENAME

echo "local_date    = $local_date"
echo "local_kernel = $local_kernel"

verify_kernel "$local_date" "$local_kernel" "$GRUB_DIR"

if [ "$NEEDS_UPDATE" == 1 ]; then
    echo " "
    echo "** $MYHOST needs kernel update..."
else
    echo "$MYHOST kernel is up to date (type=$BASENAME)"
fi

#-----------------------------------------------
# Verify the *non*-existence of certain key rpms
#-----------------------------------------------

###if [ "$BASENAME" != "master" ];then
    rpms_list="GLOBAL_UNINSTALL_RPMS"
    eval local_rpms=\$$rpms_list
    verify_rpms "$local_rpms" REMOVE
###fi

#--------------------------------------
# Install software common to all nodes.
#--------------------------------------

export NEEDS_UPDATE=0
export count=0

verify_rpms "$GLOBAL_RPMS"

if [ "$NEEDS_UPDATE" == 1 ]; then
    echo " "
    echo "** $MYHOST needs updating (type=common)"
else
    printf "$MYHOST is up to date with %3i packages (type=common)\n" $count 
fi

#------------------------------------------------
# Install software common to this appliance only
#------------------------------------------------

export NEEDS_UPDATE=0
export count=0
rpms_list=$BASENAME"_RPMS"
eval local_rpms=\$$rpms_list

verify_rpms "$local_rpms" UPDATE

if [ "$NEEDS_UPDATE" == 1 ]; then
    echo " "
    echo "** $MYHOST needs updating ($BASENAME packages)"
else
    printf "$MYHOST is up to date with %3i packages (type=$BASENAME)\n" $count 
fi


#------------------------------------------------
# Sync desired configuration files
#------------------------------------------------

export OSF_ECHO_MODE="ERROR"
#export OSF_ECHO_MODE="INFO"

$TOP_DIR/sync_config_files

#------------------------------------------------------------
# Verify os distribution is up2date with a quick sanity check.
#------------------------------------------------------------

# TODO: need to update...
####$INSTALL_DIR/utils/quick_check.sh








